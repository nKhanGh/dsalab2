template <class T>
T DLinkedList<T>::removeAt(int index)
{
    if(index < 0 || index >= count) {
        throw std::out_of_range("Index is out of range!");
    }
    Node* a = head;
    T c;
    if(index == 0){
        if(count == 1) tail = NULL;
        head = head->next;
    }
    else if(index == count - 1){
        a = tail;
        tail = tail->previous;
        tail->next = NULL;
    }
    else{
        Node* b = NULL;
        for(int i = 0; i < index; i++){
            b = a;
            a = a->next;
        }
        b->next = a->next;
        a->next->previous = b;
    }
    c = a->data;
    delete a;
    count--;
    return c;
}

template <class T>
bool DLinkedList<T>::removeItem(const T& item)
{
    Node* a = head;
    Node* b = NULL;
    while(a != NULL){
        if(a->data == item){
            if(a == head){
                head = head->next;
                if(count == 1) tail = NULL;
            } else if(a == tail){
                tail = tail->previous;
                tail->next = NULL;
            } else{
                b->next = a->next;
                a->next->previous = b;
            }
            delete a;
            count--;
            return true;
        }
        b = a;
        a = a->next;
    }
    return false;
}

template<class T>
void DLinkedList<T>::clear(){
    while(head != NULL){
        Node* a = head;
        head = head->next;
        delete a;
    }
    count = 0;
    head = NULL;
    tail = NULL;
}

int secondsToBeRotten(vector<vector<int>>& grid) {
    queue<pair<size_t, size_t>> rotten;
    int times = 0;
    int numfresh = 0;
    for(size_t i = 0; i < grid.size(); i++){
        for(size_t j = 0; j < grid[i].size(); j++){
            if(grid[i][j] == 2) rotten.push({i, j});
            else if(grid[i][j] == 1) numfresh++;
        }
    }
    while(!rotten.empty()){
        size_t s = rotten.size();
        bool rottened = false;
        
        for(size_t i = 0; i < s; i++){
            size_t x = rotten.front().first;
            size_t y = rotten.front().second;
            rotten.pop();
            if(y > 0 && grid[x][y - 1] == 1){
                grid[x][y - 1] = 2;
                rotten.push({x, y - 1});
                numfresh--;
                rottened = true;
            }
            if(y + 1 < grid[x].size() && grid[x][y + 1] == 1){
                grid[x][y + 1] = 2;
                rotten.push({x, y + 1});
                numfresh--;
                rottened = true;
            } 
            if(x > 0 && grid[x - 1][y] == 1) {
                grid[x - 1][y] = 2;
                rotten.push({x - 1, y});
                numfresh--;
                rottened = true;
            }
            if(x + 1 < grid.size() && grid[x + 1][y] == 1){
                grid[x + 1][y] = 2;
                rotten.push({x + 1, y});
                numfresh--;
                rottened = true;
            }
        }
        if(rottened) times++;
        
       
    }
    if(numfresh != 0) return -1;
    return times;
}
